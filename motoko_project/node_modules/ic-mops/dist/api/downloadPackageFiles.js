import { mainActor, storageActor } from './actors.js';
import { resolveVersion } from './resolveVersion.js';
import { parallel } from '../parallel.js';
export async function downloadPackageFiles(pkg, version = '', threads = 8, onLoad = (_fileIds, _fileId) => { }) {
    version = await resolveVersion(pkg, version);
    let { storageId, fileIds } = await getPackageFilesInfo(pkg, version);
    let storage = await storageActor(storageId);
    let filesData = new Map();
    await parallel(threads, fileIds, async (fileId) => {
        let { path, data } = await downloadFile(storage, fileId);
        filesData.set(path, data);
        onLoad(fileIds, fileId);
    });
    return filesData;
}
// get package files meta
export async function getPackageFilesInfo(pkg, version) {
    let actor = await mainActor();
    let [packageDetailsRes, fileIds] = await Promise.all([
        actor.getPackageDetails(pkg, version),
        getFileIds(pkg, version),
    ]);
    if ('err' in packageDetailsRes) {
        throw packageDetailsRes.err;
    }
    let packageDetails = packageDetailsRes.ok;
    return {
        storageId: packageDetails.publication.storage,
        fileIds,
    };
}
// get package files ids
export async function getFileIds(pkg, version) {
    let actor = await mainActor();
    let fileIdsRes = await actor.getFileIds(pkg, version);
    if ('err' in fileIdsRes) {
        throw fileIdsRes.err;
    }
    let filesIds = fileIdsRes.ok;
    return filesIds;
}
// download single file
export async function downloadFile(storage, fileId) {
    let fileMetaRes = await storage.getFileMeta(fileId);
    if ('err' in fileMetaRes) {
        throw fileMetaRes.err;
    }
    let fileMeta = fileMetaRes.ok;
    let data = [];
    for (let i = 0n; i < fileMeta.chunkCount; i++) {
        let chunkRes = await storage.downloadChunk(fileId, i);
        if ('err' in chunkRes) {
            throw chunkRes.err;
        }
        let chunk = chunkRes.ok;
        data = [...data, ...chunk];
    }
    return {
        path: fileMeta.path,
        data: data,
    };
}
