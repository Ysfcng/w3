import { Actor, HttpAgent } from '@dfinity/agent';
import { idlFactory } from '../declarations/main/index.js';
import { idlFactory as storageIdlFactory } from '../declarations/storage/index.js';
import { getEndpoint } from './network.js';
import { getNetwork } from './network.js';
export let mainActor = async (identity) => {
    let network = getNetwork();
    let host = getEndpoint(network).host;
    let canisterId = getEndpoint(network).canisterId;
    // @ts-ignore exactOptionalPropertyTypes
    let agent = new HttpAgent({ host, identity });
    if (network === 'local') {
        await agent.fetchRootKey();
    }
    return Actor.createActor(idlFactory, {
        agent,
        canisterId,
    });
};
export let storageActor = async (storageId, identity) => {
    let network = getNetwork();
    let host = getEndpoint(network).host;
    // @ts-ignore exactOptionalPropertyTypes
    let agent = new HttpAgent({ host, identity });
    if (network === 'local') {
        await agent.fetchRootKey();
    }
    return Actor.createActor(storageIdlFactory, {
        agent,
        canisterId: storageId,
    });
};
