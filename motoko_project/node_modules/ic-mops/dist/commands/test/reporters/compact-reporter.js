var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CompactReporter_instances, _CompactReporter_allFiles, _CompactReporter_runningFiles, _CompactReporter_failedFiles, _CompactReporter_finishedFiles, _CompactReporter_startTime, _CompactReporter_timerId, _CompactReporter_startTimer, _CompactReporter_clearTimer, _CompactReporter_log;
import chalk from 'chalk';
import logUpdate from 'log-update';
import { absToRel } from '../utils.js';
export class CompactReporter {
    constructor() {
        _CompactReporter_instances.add(this);
        this.passed = 0;
        this.failed = 0;
        this.skipped = 0;
        this.passedFiles = 0;
        this.failedFiles = 0;
        _CompactReporter_allFiles.set(this, new Set());
        _CompactReporter_runningFiles.set(this, new Set());
        _CompactReporter_failedFiles.set(this, new Set());
        _CompactReporter_finishedFiles.set(this, new Set());
        _CompactReporter_startTime.set(this, Date.now());
        _CompactReporter_timerId.set(this, null);
    }
    addFiles(files) {
        __classPrivateFieldSet(this, _CompactReporter_allFiles, new Set(files), "f");
        __classPrivateFieldGet(this, _CompactReporter_instances, "m", _CompactReporter_log).call(this);
        __classPrivateFieldGet(this, _CompactReporter_instances, "m", _CompactReporter_startTimer).call(this);
    }
    addRun(file, mmf, state, _wasiMode) {
        __classPrivateFieldGet(this, _CompactReporter_runningFiles, "f").add(file);
        __classPrivateFieldGet(this, _CompactReporter_instances, "m", _CompactReporter_log).call(this);
        state.then(() => {
            this.passed += mmf.passed;
            this.failed += mmf.failed;
            this.skipped += mmf.skipped;
            if (mmf.passed === 0 && mmf.failed === 0) {
                this.passed++;
            }
            this.passedFiles += Number(mmf.failed === 0);
            this.failedFiles += Number(mmf.failed !== 0);
            if (mmf.failed) {
                __classPrivateFieldGet(this, _CompactReporter_failedFiles, "f").add(file);
                logUpdate.clear();
                console.log(chalk.red('âœ–'), absToRel(file));
                mmf.flush('fail');
                console.log('-'.repeat(50));
            }
            __classPrivateFieldGet(this, _CompactReporter_runningFiles, "f").delete(file);
            __classPrivateFieldGet(this, _CompactReporter_finishedFiles, "f").add(file);
            __classPrivateFieldGet(this, _CompactReporter_instances, "m", _CompactReporter_log).call(this);
        });
    }
    done() {
        __classPrivateFieldGet(this, _CompactReporter_instances, "m", _CompactReporter_log).call(this);
        logUpdate.done();
        __classPrivateFieldGet(this, _CompactReporter_instances, "m", _CompactReporter_clearTimer).call(this);
        return this.failed === 0;
    }
}
_CompactReporter_allFiles = new WeakMap(), _CompactReporter_runningFiles = new WeakMap(), _CompactReporter_failedFiles = new WeakMap(), _CompactReporter_finishedFiles = new WeakMap(), _CompactReporter_startTime = new WeakMap(), _CompactReporter_timerId = new WeakMap(), _CompactReporter_instances = new WeakSet(), _CompactReporter_startTimer = function _CompactReporter_startTimer() {
    __classPrivateFieldSet(this, _CompactReporter_timerId, setInterval(() => __classPrivateFieldGet(this, _CompactReporter_instances, "m", _CompactReporter_log).call(this), 55), "f");
}, _CompactReporter_clearTimer = function _CompactReporter_clearTimer() {
    if (__classPrivateFieldGet(this, _CompactReporter_timerId, "f")) {
        clearInterval(__classPrivateFieldGet(this, _CompactReporter_timerId, "f"));
    }
}, _CompactReporter_log = function _CompactReporter_log() {
    let res = [];
    let i = 0;
    for (let file of __classPrivateFieldGet(this, _CompactReporter_allFiles, "f")) {
        if (__classPrivateFieldGet(this, _CompactReporter_runningFiles, "f").has(file)) {
            res[Number(i)] = '.';
        }
        else if (__classPrivateFieldGet(this, _CompactReporter_finishedFiles, "f").has(file)) {
            res[Number(i)] = __classPrivateFieldGet(this, _CompactReporter_failedFiles, "f").has(file) ? chalk.red(':') : ':';
        }
        else {
            res[Number(i)] = ' ';
        }
        i++;
    }
    let output = `[${res.join('')}]\n`
        + `${chalk.gray(((Date.now() - __classPrivateFieldGet(this, _CompactReporter_startTime, "f")) / 1000).toFixed(2) + 's')}`
        + `, total ${__classPrivateFieldGet(this, _CompactReporter_allFiles, "f").size} files`
        + `, passed ${chalk.greenBright(this.passedFiles)} files`
        + (this.skipped ? `, skipped ${chalk[this.skipped ? 'yellowBright' : 'gray'](this.skipped)} cases` : '')
        + (this.failed ? `, failed ${chalk[this.failed ? 'redBright' : 'gray'](this.failed)} cases` : '');
    logUpdate(output);
};
