// mops message format v1
// mops:1:start
// mops:1:end
// mops:1:skip
import chalk from 'chalk';
export class MMF1 {
    constructor(srategy, file) {
        this.stack = [];
        this.currSuite = '';
        this.failed = 0;
        this.passed = 0;
        this.skipped = 0;
        this.output = [];
        this.nestingSymbol = ' › ';
        // or <file>
        // or <file> › <test>
        // or <file> › <suite> › <test>
        // or <file> › <suite> › <test> › <nested-test>...
        this.passedNamesFlat = [];
        this.srategy = srategy;
        this.file = file;
    }
    _log(type, ...args) {
        if (this.srategy === 'store') {
            this.output.push({
                type,
                message: args.join(' ')
            });
        }
        else if (this.srategy === 'print') {
            console.log(...args);
        }
    }
    flush(messageType) {
        for (let out of this.output) {
            if (!messageType || out.type === messageType) {
                console.log(out.message);
            }
        }
        this.output = [];
    }
    parseLine(line) {
        if (line.startsWith('mops:1:start ')) {
            this._testStart(line.split('mops:1:start ')[1] || '');
        }
        else if (line.startsWith('mops:1:end ')) {
            this._testEnd(line.split('mops:1:end ')[1] || '');
        }
        else if (line.startsWith('mops:1:skip ')) {
            this._testSkip(line.split('mops:1:skip ')[1] || '');
        }
        else if (line.startsWith('mops:')) {
            // ignore unknown mops messages
        }
        else {
            this._log('stdout', ' '.repeat(this.stack.length * 2), chalk.gray('stdout'), line);
        }
    }
    _testStart(name) {
        let suite = this.stack[this.stack.length - 1];
        if (suite) {
            if (this.currSuite !== suite) {
                this.currSuite = suite;
                this._log('suite', ' '.repeat((this.stack.length - 1) * 2), (chalk.gray('•')) + '', suite);
            }
        }
        this.stack.push(name);
    }
    _testEnd(name) {
        if (name !== this.stack.pop()) {
            throw 'mmf1._testEnd: start and end test mismatch';
        }
        this._status(name, 'pass');
    }
    _testSkip(name) {
        this._status(name, 'skip');
    }
    _status(name, status) {
        if (status === 'pass') {
            // do not print suite at the end
            if (name === this.currSuite) {
                return;
            }
            this.passed++;
            this._log(status, ' '.repeat(this.stack.length * 2), chalk.green('✓'), name);
            this.passedNamesFlat.push([this.file, ...this.stack, name].join(this.nestingSymbol));
        }
        else if (status === 'fail') {
            this.failed++;
            this._log(status, ' '.repeat(this.stack.length * 2), chalk.red('✖'), name);
        }
        else if (status === 'skip') {
            this.skipped++;
            this._log(status, ' '.repeat(this.stack.length * 2), chalk.yellow('−'), name);
        }
    }
    fail(stderr) {
        let name = this.stack.pop() || '';
        this._status(name, 'fail');
        this._log('fail', ' '.repeat(this.stack.length * 2), chalk.red('FAIL'), stderr);
    }
    pass() {
        let name = this.stack.pop();
        if (name) {
            this._status(name, 'pass');
        }
        this._log('pass', ' '.repeat(this.stack.length * 2), chalk.green('PASS'));
    }
}
