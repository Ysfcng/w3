"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentManager = void 0;
/* eslint-disable no-console */
const agent_1 = require("@dfinity/agent");
const helper_1 = require("../../utils/helper");
const auth_client_1 = require("@dfinity/auth-client");
const constants_1 = require("../../utils/constants");
class AgentManager {
    constructor(options) {
        var _a;
        this._auth = null;
        this._subscribers = [];
        this.initialAgentState = {
            initialized: false,
            initializing: false,
            error: undefined,
            network: "ic",
        };
        this.initialAuthState = {
            identity: null,
            authenticating: false,
            authenticated: false,
            error: undefined,
        };
        this.updateAgentState = (newState, action) => {
            this.agentStore.setState((state) => (Object.assign(Object.assign({}, state), newState)), false, action);
        };
        this.updateAuthState = (newState, action) => {
            this.authStore.setState((state) => (Object.assign(Object.assign({}, state), newState)), false, action);
        };
        this.initializeAgent = () => __awaiter(this, void 0, void 0, function* () {
            const network = this.getNetwork();
            this.updateAgentState({
                initializing: true,
                error: undefined,
                network,
            }, "initializing");
            if (network !== "ic") {
                try {
                    yield this._agent.fetchRootKey();
                }
                catch (error) {
                    this.updateAgentState({ error: error, initializing: false }, "error");
                }
            }
            this.updateAgentState({ initialized: true, initializing: false }, "initialized");
        });
        this.subscribeAgent = (callback, initialize = true) => {
            if (initialize) {
                callback(this._agent);
            }
            this._subscribers.push(callback);
            return () => this.unsubscribeAgent(callback);
        };
        this.unsubscribeAgent = (callback) => {
            this._subscribers = this._subscribers.filter((sub) => sub !== callback);
        };
        this.notifySubscribers = () => __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this._subscribers.map((callback) => __awaiter(this, void 0, void 0, function* () { return callback(this._agent); })));
        });
        this.updateAgent = (options) => __awaiter(this, void 0, void 0, function* () {
            const { agent } = options || {};
            if (agent) {
                this._agent = agent;
            }
            else if (options) {
                this._agent = new agent_1.HttpAgent(options);
                yield this.initializeAgent();
            }
            yield this.notifySubscribers();
        });
        this.authenticate = () => __awaiter(this, void 0, void 0, function* () {
            console.log(`Authenticating on ${this.getNetwork()} network`);
            this.updateAuthState({ authenticating: true }, "authenticating");
            try {
                this._auth = yield auth_client_1.AuthClient.create();
                const authenticated = yield this._auth.isAuthenticated();
                const identity = this._auth.getIdentity();
                this._agent.replaceIdentity(identity);
                this.notifySubscribers();
                this.updateAuthState({
                    authenticated,
                    identity,
                    authenticating: false,
                }, "authenticated");
                return identity;
            }
            catch (error) {
                this.updateAuthState({ error: error, authenticating: false }, "error");
                throw error;
            }
        });
        this.login = (options) => __awaiter(this, void 0, void 0, function* () {
            this.updateAuthState({ authenticating: true }, "login");
            if (!this._auth) {
                yield this.authenticate();
            }
            if (!this._auth) {
                throw new Error("Auth client not initialized");
            }
            yield this._auth.login(Object.assign(Object.assign({ identityProvider: this.getIsLocal()
                    ? constants_1.LOCAL_INTERNET_IDENTITY_PROVIDER
                    : constants_1.IC_INTERNET_IDENTITY_PROVIDER }, options), { onSuccess: (msg) => __awaiter(this, void 0, void 0, function* () {
                    var _c;
                    yield this.authenticate();
                    (_c = options === null || options === void 0 ? void 0 : options.onSuccess) === null || _c === void 0 ? void 0 : _c.call(options, msg);
                }) }));
        });
        this.logout = (options) => __awaiter(this, void 0, void 0, function* () {
            if (!this._auth) {
                throw new Error("Auth client not initialized");
            }
            yield this._auth.logout(options);
            yield this.authenticate();
        });
        // agent store
        this.getAgent = () => {
            return this._agent;
        };
        this.getAgentHost = () => {
            return this._agent._host;
        };
        this.getIsLocal = () => {
            return this.getNetwork() !== "ic";
        };
        this.getNetwork = () => {
            const hostname = this.getAgentHost().hostname;
            if (constants_1.LOCAL_HOSTS.some((host) => hostname.endsWith(host))) {
                return "local";
            }
            else if (constants_1.REMOTE_HOSTS.some((host) => hostname.endsWith(host))) {
                return "remote";
            }
            else {
                return "ic";
            }
        };
        this.getAgentState = () => {
            return this.agentStore.getState();
        };
        this.subscribeAgentState = (listener) => {
            return this.agentStore.subscribe(listener);
        };
        // auth store
        this.getAuthState = () => {
            return this.authStore.getState();
        };
        this.subscribeAuthState = (listener) => {
            return this.authStore.subscribe(listener);
        };
        this.getAuth = () => {
            return this._auth;
        };
        this.getIdentity = () => {
            return this.authStore.getState().identity;
        };
        this.getPrincipal = () => {
            const identity = this.authStore.getState().identity;
            return identity ? identity.getPrincipal() : null;
        };
        const _b = options || {}, { withDevtools, port = 4943, withLocalEnv, withProcessEnv } = _b, agentOptions = __rest(_b, ["withDevtools", "port", "withLocalEnv", "withProcessEnv"]);
        if (withProcessEnv) {
            const processNetwork = (0, helper_1.getProcessEnvNetwork)();
            agentOptions.host =
                processNetwork === "ic" ? constants_1.IC_HOST_NETWORK_URI : undefined;
        }
        else if (withLocalEnv) {
            agentOptions.host = `http://127.0.0.1:${port}`;
        }
        else {
            agentOptions.host = (_a = agentOptions.host) !== null && _a !== void 0 ? _a : constants_1.IC_HOST_NETWORK_URI;
        }
        this.agentStore = (0, helper_1.createStoreWithOptionalDevtools)(this.initialAgentState, {
            withDevtools,
            name: "reactor-agent",
            store: "agent",
        });
        this.authStore = (0, helper_1.createStoreWithOptionalDevtools)(this.initialAuthState, {
            withDevtools,
            name: "reactor-agent",
            store: "auth",
        });
        this._agent = new agent_1.HttpAgent(agentOptions);
        this.initializeAgent();
    }
}
exports.AgentManager = AgentManager;
