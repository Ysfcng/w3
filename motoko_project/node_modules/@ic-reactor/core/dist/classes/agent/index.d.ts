import { HttpAgent } from "@dfinity/agent";
import { AuthClient } from "@dfinity/auth-client";
import type { AuthClientLoginOptions } from "../../types";
import type { AgentStore, AgentManagerParameters, UpdateAgentParameters, AuthStore } from "./types";
export declare class AgentManager {
    private _agent;
    private _auth;
    private _subscribers;
    agentStore: AgentStore;
    authStore: AuthStore;
    private initialAgentState;
    private initialAuthState;
    private updateAgentState;
    private updateAuthState;
    constructor(options?: AgentManagerParameters);
    private initializeAgent;
    subscribeAgent: (callback: (agent: HttpAgent) => void, initialize?: boolean) => () => void;
    unsubscribeAgent: (callback: (agent: HttpAgent) => void) => void;
    private notifySubscribers;
    updateAgent: (options?: UpdateAgentParameters) => Promise<void>;
    authenticate: () => Promise<import("@dfinity/agent").Identity>;
    login: (options?: AuthClientLoginOptions) => Promise<void>;
    logout: (options?: {
        returnTo?: string;
    }) => Promise<void>;
    getAgent: () => HttpAgent;
    getAgentHost: () => URL;
    getIsLocal: () => boolean;
    getNetwork: () => "local" | "remote" | "ic";
    getAgentState: AgentStore["getState"];
    subscribeAgentState: AgentStore["subscribe"];
    getAuthState: AuthStore["getState"];
    subscribeAuthState: AuthStore["subscribe"];
    getAuth: () => AuthClient | null;
    getIdentity: () => import("@dfinity/agent").Identity | null;
    getPrincipal: () => import("@dfinity/principal").Principal | null;
}
