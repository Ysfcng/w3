"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidAdapter = void 0;
const agent_1 = require("@dfinity/agent");
const constants_1 = require("../../utils/constants");
const utils_1 = require("../../utils");
class CandidAdapter {
    constructor({ agentManager, agent, didjsCanisterId, }) {
        this.unsubscribeAgent = () => { };
        if (agent) {
            this.agent = agent;
        }
        else if (agentManager) {
            this.agent = agentManager.getAgent();
            this.unsubscribeAgent = agentManager.subscribeAgent((agent) => {
                this.agent = agent;
                this.didjsCanisterId = didjsCanisterId || this.getDefaultDidJsId();
            });
        }
        else {
            throw new Error("No agent or agentManager provided");
        }
        this.didjsCanisterId = didjsCanisterId || this.getDefaultDidJsId();
    }
    initializeParser(module) {
        return __awaiter(this, void 0, void 0, function* () {
            if (module !== undefined) {
                this.parserModule = module;
                return;
            }
            try {
                this.parserModule = require("@ic-reactor/parser");
                if (typeof this.parserModule !== "undefined" &&
                    "default" in this.parserModule) {
                    yield this.parserModule.default();
                }
            }
            catch (error) {
                throw new Error(`Error initializing parser: ${error}`);
            }
        });
    }
    getDefaultDidJsId() {
        var _a, _b;
        return ((_b = (_a = this.agent).isLocal) === null || _b === void 0 ? void 0 : _b.call(_a)) === true
            ? constants_1.DEFAULT_LOCAL_DIDJS_ID
            : constants_1.DEFAULT_IC_DIDJS_ID;
    }
    fetchCandidDefinition(canisterId) {
        return __awaiter(this, void 0, void 0, function* () {
            let candidDef = "";
            // First attempt: Try getting Candid definition from metadata
            try {
                candidDef = yield this.getFromMetadata(canisterId);
                if (!candidDef) {
                    throw new Error("Cannot retrieve Candid definition from metadata");
                }
            }
            catch (error) {
                // Second attempt: Try the temporary hack method
                candidDef = yield this.getFromTmpHack(canisterId).catch(() => {
                    return undefined;
                });
            }
            if (!candidDef) {
                throw new Error("Failed to retrieve Candid definition by any method.");
            }
            return candidDef;
        });
    }
    getCandidDefinition(canisterId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const candidDef = yield this.fetchCandidDefinition(canisterId);
                return this.dynamicEvalJs(candidDef);
            }
            catch (error) {
                throw new Error(`Error fetching canister ${canisterId}: ${error}`);
            }
        });
    }
    getFromMetadata(canisterId) {
        return __awaiter(this, void 0, void 0, function* () {
            const status = yield agent_1.CanisterStatus.request({
                agent: this.agent,
                canisterId: canisterId,
                paths: ["candid"],
            });
            return status.get("candid");
        });
    }
    getFromTmpHack(canisterId) {
        return __awaiter(this, void 0, void 0, function* () {
            const commonInterface = ({ IDL }) => IDL.Service({
                __get_candid_interface_tmp_hack: IDL.Func([], [IDL.Text], ["query"]),
            });
            const actor = agent_1.Actor.createActor(commonInterface, {
                agent: this.agent,
                canisterId,
            });
            return (yield actor.__get_candid_interface_tmp_hack());
        });
    }
    dynamicEvalJs(data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let candidDef = "";
                try {
                    candidDef = this.parseDidToJs(data);
                    if (candidDef === "") {
                        throw new Error("Cannot compile Candid to JavaScript");
                    }
                }
                catch (error) {
                    candidDef = (yield this.fetchDidTojs(data))[0];
                }
                if (JSON.stringify(candidDef) === JSON.stringify([])) {
                    throw new Error("Cannot compile Candid to JavaScript");
                }
                return yield (0, utils_1.importCandidDefinition)(candidDef);
            }
            catch (error) {
                throw new Error(`Error evaluating Candid definition: ${error}`);
            }
        });
    }
    fetchDidTojs(candidSource, didjsCanisterId) {
        return __awaiter(this, void 0, void 0, function* () {
            const didjsInterface = ({ IDL }) => IDL.Service({
                did_to_js: IDL.Func([IDL.Text], [IDL.Opt(IDL.Text)], ["query"]),
            });
            const didjs = agent_1.Actor.createActor(didjsInterface, {
                agent: this.agent,
                canisterId: didjsCanisterId || this.didjsCanisterId,
            });
            return didjs.did_to_js(candidSource);
        });
    }
    parseDidToJs(candidSource) {
        if (!this.parserModule) {
            throw new Error("Parser module not available");
        }
        return this.parserModule.didToJs(candidSource);
    }
}
exports.CandidAdapter = CandidAdapter;
