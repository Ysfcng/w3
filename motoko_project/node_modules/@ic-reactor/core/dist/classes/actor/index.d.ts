import type { CallConfig } from "@dfinity/agent";
import type { ActorMethodParameters, ActorMethodReturnType, ActorStore, ActorManagerParameters, FunctionName, VisitService, BaseActor, ActorMethodState, MethodAttributes } from "./types";
import { IDL } from "@dfinity/candid";
import type { AgentManager } from "../agent";
import type { UpdateAgentParameters } from "../types";
export declare class ActorManager<A = BaseActor> {
    private _actor;
    private _idlFactory;
    private _agentManager;
    private _unsubscribeAgent;
    private _subscribers;
    canisterId: string;
    actorStore: ActorStore<A>;
    visitFunction: VisitService<A>;
    methodAttributes: MethodAttributes<A>;
    private updateState;
    updateMethodState: (method: FunctionName<A>, hash: string, newState: Partial<{
        data: ActorMethodReturnType<A[FunctionName<A>]> | undefined;
        loading: boolean;
        error: Error | undefined;
    }>) => void;
    constructor(actorConfig: ActorManagerParameters);
    initialize: (options?: UpdateAgentParameters) => Promise<void>;
    extractInterface: () => IDL.ServiceClass;
    extractMethodAttributes: () => MethodAttributes<A>;
    extractVisitor: () => VisitService<A>;
    private initializeActor;
    private _getActorMethod;
    callMethod: <M extends FunctionName<A>>(functionName: M, ...args: ActorMethodParameters<A[M]>) => Promise<ActorMethodReturnType<A[M]>>;
    callMethodWithOptions: (options: CallConfig) => <M extends FunctionName<A>>(functionName: M, ...args: ActorMethodParameters<A[M]>) => Promise<ActorMethodReturnType<A[M]>>;
    get agentManager(): AgentManager;
    getActor: () => A | null;
    getState: ActorStore<A>["getState"];
    subscribeActorState: ActorStore<A>["subscribe"];
    setState: ActorStore<A>["setState"];
    cleanup: () => void;
}
