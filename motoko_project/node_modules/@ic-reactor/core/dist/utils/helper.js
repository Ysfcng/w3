"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringToHash = exports.generateActorHash = exports.generateHash = exports.generateRequestHash = exports.jsonToString = exports.isQuery = exports.getProcessEnvNetwork = exports.isInLocalOrDevelopment = exports.importCandidDefinition = exports.createStoreWithOptionalDevtools = void 0;
const agent_1 = require("@dfinity/agent");
const middleware_1 = require("zustand/middleware");
const vanilla_1 = require("zustand/vanilla");
function createStoreWithOptionalDevtools(initialState, config) {
    if (config.withDevtools) {
        return (0, vanilla_1.createStore)((0, middleware_1.devtools)(() => initialState, Object.assign({ serialize: {
                replacer: (_, value) => typeof value === "bigint" ? value.toString() : value,
            } }, config)));
    }
    else {
        return (0, vanilla_1.createStore)(() => initialState);
    }
}
exports.createStoreWithOptionalDevtools = createStoreWithOptionalDevtools;
const importCandidDefinition = (candidDef) => __awaiter(void 0, void 0, void 0, function* () {
    if (typeof window === "undefined") {
        // Node.js environment
        try {
            const loaderFunction = new Function(`
        return import("data:text/javascript;charset=utf-8, ${encodeURIComponent(candidDef)}")
      `);
            return loaderFunction();
        }
        catch (error) {
            throw new Error(`Error importing candid definition in NodeJs: ${error}`);
        }
    }
    else {
        // Browser environment
        try {
            const loaderFunction = new Function(`
        const blob = new Blob([\`${candidDef}\`], { type: "application/javascript" })
        const url = URL.createObjectURL(blob)
        return import(url)
      `);
            return loaderFunction();
        }
        catch (error) {
            throw new Error(`Error importing candid definition: ${error}`);
        }
    }
});
exports.importCandidDefinition = importCandidDefinition;
const isInLocalOrDevelopment = () => {
    return typeof process !== "undefined" && process.env.DFX_NETWORK === "local";
};
exports.isInLocalOrDevelopment = isInLocalOrDevelopment;
const getProcessEnvNetwork = () => {
    var _a;
    if (typeof process === "undefined")
        return "ic";
    else
        return (_a = process.env.DFX_NETWORK) !== null && _a !== void 0 ? _a : "ic";
};
exports.getProcessEnvNetwork = getProcessEnvNetwork;
function isQuery(func) {
    return (func.annotations.includes("query") ||
        func.annotations.includes("composite_query"));
}
exports.isQuery = isQuery;
const jsonToString = (json, space = 2) => {
    return JSON.stringify(json, (_, value) => (typeof value === "bigint" ? `BigInt(${value})` : value), space);
};
exports.jsonToString = jsonToString;
const generateRequestHash = (args = []) => {
    const serializedArgs = (0, agent_1.hashValue)(args);
    return `0x${(0, agent_1.toHex)(serializedArgs)}`;
};
exports.generateRequestHash = generateRequestHash;
const generateHash = (field) => {
    const serializedArgs = JSON.stringify(field);
    return (0, exports.stringToHash)(serializedArgs !== null && serializedArgs !== void 0 ? serializedArgs : "");
};
exports.generateHash = generateHash;
const generateActorHash = (actor) => {
    const serializedArgs = JSON.stringify(actor);
    return (0, exports.stringToHash)(serializedArgs !== null && serializedArgs !== void 0 ? serializedArgs : "");
};
exports.generateActorHash = generateActorHash;
const stringToHash = (str) => {
    const hashBytes = (0, agent_1.hash)(new TextEncoder().encode(str));
    return `0x${toHexString(hashBytes)}`;
};
exports.stringToHash = stringToHash;
function toHexString(bytes) {
    return (0, agent_1.toHex)(bytes);
}
