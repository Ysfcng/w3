import { DevtoolsOptions } from "zustand/middleware";
import type { BaseActor, CandidDefenition, IDL } from "../types";
export declare function createStoreWithOptionalDevtools<T>(initialState: T, config: DevtoolsOptions): Omit<import("zustand/vanilla").StoreApi<T>, "setState"> & {
    setState<A extends string | {
        type: string;
    }>(partial: T | Partial<T> | ((state: T) => T | Partial<T>), replace?: boolean | undefined, action?: A | undefined): void;
};
export declare const importCandidDefinition: (candidDef: string) => Promise<CandidDefenition>;
export declare const isInLocalOrDevelopment: () => boolean;
export declare const getProcessEnvNetwork: () => string;
export declare function isQuery(func: IDL.FuncClass): boolean;
export declare const jsonToString: (json: unknown, space?: number) => string;
export declare const generateRequestHash: (args?: unknown[]) => `0x${string}`;
export declare const generateHash: (field?: unknown) => `0x${string}`;
export declare const generateActorHash: (actor: BaseActor) => `0x${string}`;
export declare const stringToHash: (str: string) => `0x${string}`;
