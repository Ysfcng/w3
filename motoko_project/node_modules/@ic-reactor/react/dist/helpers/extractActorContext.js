"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractActorContext = void 0;
const react_1 = __importDefault(require("react"));
function extractActorContext(actorContext) {
    const useActorContext = () => {
        const context = react_1.default.useContext(actorContext);
        if (!context) {
            throw new Error("Actor hooks must be used within a ActorProvider");
        }
        return context;
    };
    const initialize = () => useActorContext().initialize();
    const useMethodNames = () => useActorContext().useMethodNames();
    const useMethodAttributes = () => useActorContext().useMethodAttributes();
    const useActorStore = (selector = (s) => s) => {
        return useActorContext().useActorStore(selector);
    };
    const useActorState = () => useActorContext().useActorState();
    const useMethod = (args) => useActorContext().useMethod(args);
    const useQueryCall = (args) => useActorContext().useQueryCall(args);
    const useUpdateCall = (args) => useActorContext().useUpdateCall(args);
    const useVisitMethod = (functionName) => useActorContext().useVisitMethod(functionName);
    const useVisitService = () => useActorContext().useVisitService();
    const useActorInterface = () => useActorContext().useActorInterface();
    return {
        useActorStore,
        useActorState,
        useMethod,
        useMethodNames,
        useMethodAttributes,
        useQueryCall,
        useUpdateCall,
        useVisitMethod,
        useVisitService,
        useActorInterface,
        initialize,
    };
}
exports.extractActorContext = extractActorContext;
