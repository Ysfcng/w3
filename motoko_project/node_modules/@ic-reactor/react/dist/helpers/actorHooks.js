"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.actorHooks = void 0;
const React = __importStar(require("react"));
const zustand_1 = require("zustand");
const shallow_1 = require("zustand/react/shallow");
const utils_1 = require("../utils");
const DEFAULT_STATE = {
    data: undefined,
    error: undefined,
    loading: false,
};
/**
 * Provides a set of React hooks designed for interacting with actors in an Internet Computer (IC) project using the React framework and Zustand for state management.
 *
 * @param actorManager An instance of ActorManager containing methods and properties to manage actors, including the actorStore, canisterId, visitFunction, callMethod, and initialize function.
 * @returns An object containing several hooks and utility functions for interacting with actors, managing state, and invoking actor methods.
 *
 * Hooks included:
 * - initialize: Function to initialize actor management.
 * - useActorState: Hook for accessing the actor's state including the canister ID.
 * - useVisitMethod: Hook for memoizing a method visit service for a given actor method name.
 * - useQueryCall: Hook specifically designed for query calls to actors with features such as automatic refetching on mount and at specified intervals.
 * - useUpdateCall: Hook specifically designed for update calls to actors with features such as error handling and loading state management.
 *
 * Each hook is designed to simplify the process of interacting with actors in IC projects by abstracting away the complexity of state management, error handling, and method invocation.
 */
const actorHooks = (actorManager) => {
    const { actorStore, canisterId, visitFunction, methodAttributes, updateMethodState, extractMethodAttributes, extractInterface, callMethodWithOptions, initialize, } = actorManager;
    const useActorStore = (selector = (s) => s) => {
        return (0, zustand_1.useStore)(actorStore, (0, shallow_1.useShallow)(selector));
    };
    const useActorState = () => {
        return useActorStore((state) => ({
            name: state.name,
            error: state.error,
            initialized: state.initialized,
            initializing: state.initializing,
            canisterId,
        }));
    };
    const useMethodState = (functionName, requestKey) => {
        const state = useActorStore((state) => { var _a; return (_a = state.methodState[functionName]) === null || _a === void 0 ? void 0 : _a[requestKey]; });
        const setSharedState = React.useCallback((newState) => {
            updateMethodState(functionName, requestKey, newState);
        }, [functionName, requestKey]);
        return [state, setSharedState];
    };
    const useMethodAttributes = () => {
        return React.useMemo(extractMethodAttributes, []);
    };
    const useMethodNames = () => {
        return React.useMemo(() => Object.keys(extractMethodAttributes()), []);
    };
    const useActorInterface = () => {
        return React.useMemo(() => extractInterface(), []);
    };
    const useVisitService = () => {
        return visitFunction;
    };
    const useVisitMethod = (functionName) => {
        return React.useMemo(() => {
            if (!visitFunction[functionName]) {
                throw new Error(`Method ${functionName} not found`);
            }
            return visitFunction[functionName];
        }, [functionName]);
    };
    const useSharedCall = (_a) => {
        var { args = [], functionName, throwOnError = false, onError, onLoading, onSuccess } = _a, options = __rest(_a, ["args", "functionName", "throwOnError", "onError", "onLoading", "onSuccess"]);
        const requestKey = React.useMemo(() => (0, utils_1.generateRequestHash)(args), [args]);
        const [sharedState, setSharedState] = useMethodState(functionName, requestKey);
        const reset = React.useCallback(() => updateMethodState(functionName, requestKey, DEFAULT_STATE), [functionName, requestKey]);
        const call = React.useCallback((eventOrReplaceArgs) => __awaiter(void 0, void 0, void 0, function* () {
            setSharedState({ error: undefined, loading: true });
            onLoading === null || onLoading === void 0 ? void 0 : onLoading(true);
            try {
                const replaceArgs = eventOrReplaceArgs instanceof Array ? eventOrReplaceArgs : args;
                const data = yield callMethodWithOptions(options)(functionName, ...(replaceArgs !== null && replaceArgs !== void 0 ? replaceArgs : args));
                setSharedState({ data, error: undefined, loading: false });
                onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(data);
                onLoading === null || onLoading === void 0 ? void 0 : onLoading(false);
                return data;
            }
            catch (error) {
                // eslint-disable-next-line no-console
                console.error("Error in call:", error);
                setSharedState({
                    error: error,
                    loading: false,
                });
                onError === null || onError === void 0 ? void 0 : onError(error);
                onLoading === null || onLoading === void 0 ? void 0 : onLoading(false);
                if (throwOnError)
                    throw error;
            }
        }), [args, functionName, options, onError, onLoading, onSuccess, throwOnError]);
        return Object.assign({ call, reset, requestKey }, sharedState);
    };
    const useQueryCall = (_a) => {
        var { refetchOnMount = true, refetchInterval = false } = _a, rest = __rest(_a, ["refetchOnMount", "refetchInterval"]);
        const _b = useSharedCall(rest), { call } = _b, state = __rest(_b, ["call"]);
        const intervalId = React.useRef();
        React.useEffect(() => {
            var _a;
            if (refetchInterval) {
                intervalId.current = setInterval(call, refetchInterval);
            }
            if (refetchOnMount && state.data === undefined) {
                call();
            }
            else if (refetchOnMount && state.data !== undefined) {
                (_a = rest.onSuccess) === null || _a === void 0 ? void 0 : _a.call(rest, state.data);
            }
            return () => clearInterval(intervalId.current);
        }, [refetchInterval, refetchOnMount]);
        return Object.assign({ call, intervalId }, state);
    };
    const useUpdateCall = useSharedCall;
    const useMethod = (params) => {
        const attributes = React.useMemo(() => {
            if (!methodAttributes[params.functionName]) {
                throw new Error(`Method ${params.functionName} not found`);
            }
            return methodAttributes[params.functionName];
        }, [params.functionName]);
        const visit = React.useCallback((extractorClass, data) => visitFunction[params.functionName](extractorClass, data), [params.functionName]);
        const validateArgs = React.useCallback((args, throwOnError = false) => {
            if (attributes.numberOfArgs > 0) {
                if (args === undefined || args.length === 0) {
                    if (throwOnError) {
                        throw new Error(`Method ${params.functionName} requires ${attributes.numberOfArgs} arguments, but none were provided.`);
                    }
                    return false;
                }
                try {
                    attributes.validate(args);
                    return true;
                }
                catch (error) {
                    if (throwOnError) {
                        throw error;
                    }
                    return false;
                }
            }
            return true;
        }, [attributes]);
        let refetchOnMount = params.refetchOnMount;
        let refetchInterval = params.refetchInterval;
        let formRequired = true;
        switch (attributes.type) {
            case "query":
                if (validateArgs(params.args)) {
                    formRequired = params.refetchOnMount === false ? true : false;
                }
                else {
                    refetchOnMount = false;
                    refetchInterval = false;
                }
                return Object.assign(Object.assign({ visit,
                    validateArgs }, useQueryCall(Object.assign(Object.assign({}, params), { refetchOnMount,
                    refetchInterval }))), { formRequired });
            case "update":
                return Object.assign(Object.assign({ visit, validateArgs }, useUpdateCall(params)), { formRequired });
            default:
                throw new Error(`Method type ${attributes.type} not found`);
        }
    };
    return {
        initialize,
        useActorStore,
        useMethodAttributes,
        useMethodNames,
        useMethod,
        useQueryCall,
        useUpdateCall,
        useActorState,
        useVisitMethod,
        useVisitService,
        useActorInterface,
    };
};
exports.actorHooks = actorHooks;
