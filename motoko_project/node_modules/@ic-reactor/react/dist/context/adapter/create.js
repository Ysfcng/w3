"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAdapterContext = void 0;
const react_1 = __importDefault(require("react"));
const agent_1 = require("../agent");
const core_1 = require("@ic-reactor/core");
function createAdapterContext(config = {}) {
    const { withParser: _withParser, didjsCanisterId: _didjsCanisterId } = config, defaultConfig = __rest(config, ["withParser", "didjsCanisterId"]);
    const CandidAdapterContext = react_1.default.createContext(null);
    const useCandidAdapter = () => {
        const candidAdapter = react_1.default.useContext(CandidAdapterContext);
        return candidAdapter;
    };
    const CandidAdapterProvider = (_a) => {
        var { children, withParser = _withParser, loadingComponent = react_1.default.createElement("div", null, "Loading Parser..."), didjsCanisterId = _didjsCanisterId } = _a, restConfig = __rest(_a, ["children", "withParser", "loadingComponent", "didjsCanisterId"]);
        const config = react_1.default.useMemo(() => (Object.assign(Object.assign({}, defaultConfig), restConfig)), [defaultConfig, restConfig]);
        const [initalized, setInitialized] = react_1.default.useState(false);
        const agentManager = (0, agent_1.useAgentManager)();
        const candidAdapter = react_1.default.useMemo(() => (0, core_1.createCandidAdapter)(Object.assign({ agentManager, didjsCanisterId }, config)), [didjsCanisterId, agentManager]);
        react_1.default.useEffect(() => {
            if (withParser) {
                candidAdapter.initializeParser().then(() => setInitialized(true));
            }
            else {
                setInitialized(true);
            }
        }, []);
        return (react_1.default.createElement(CandidAdapterContext.Provider, { value: candidAdapter }, initalized ? children : loadingComponent));
    };
    CandidAdapterProvider.displayName = "CandidAdapterProvider";
    return {
        useCandidAdapter,
        CandidAdapterProvider,
    };
}
exports.createAdapterContext = createAdapterContext;
