"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAgentContext = void 0;
const react_1 = __importDefault(require("react"));
const core_1 = require("@ic-reactor/core");
const agentHooks_1 = require("../../helpers/agentHooks");
const authHooks_1 = require("../../helpers/authHooks");
const extractAgentContext_1 = require("../../helpers/extractAgentContext");
/**
 * Creates a React context for managing IC agent and authentication states, providing hooks for interacting with the IC blockchain.
 * This function initializes an `AgentContext` with a set of utilities and hooks based on the provided agent configuration.
 *
 * @param config A partial configuration object {@link CreateAgentCotextParameters}, allowing customization of the agent's behavior.
 *
 * @returns
 * An object containing the {@link AgentProvider} component and various hooks for interacting with the agent and authentication state.
 * The {@link AgentProvider} component is a React context provider that should wrap your app or components needing access to agent functionalities.
 *
 * Usage:
 * - {@link AgentProvider}: React component to provide agent context to your application.
 * - {@link useAgent}, {@link useAuth}, {@link useAuthState},
 *   {@link useAgentState}, {@link useAgentManager}, {@link useUserPrincipal}:
 *  Hooks extracted from the created context for managing agent and authentication state within components.
 *
 * @example
 * ```tsx
 * // agent.ts
 * import { createAgentContext } from "@ic-reactor/react";
 * import { CreateAgentCotextParameters } from "@ic-reactor/react/dist/types";
 *
 * // Optional: Define custom agent configuration
 * const agentConfig: CreateAgentCotextParameters = {
 *   host: "https://localhost:8000",
 *   // or
 *   // withLocalEnv: true,
 *   // port: 8000,
 * };
 *
 * export const {
 *   AgentProvider,
 *   useAgent,
 *   useAuth,
 *   useAuthState,
 *   useAgentState,
 *   useAgentManager,
 *   useUserPrincipal,
 * } = createAgentContext(agentConfig);
 *```
 * Now you can use the returned hooks in your React components
 *
 * ```tsx
 * // App.tsx
 * import React from 'react';
 * import { AgentProvider } from './agent';
 *
 * const App = () => (
 *   <AgentProvider>
 *     <Login />
 *     <YourActor />
 *   </AgentProvider>
 * );
 *
 * const Login = () => {
 *  const { login } = useAuth()
 *  const principal = useUserPrincipal()
 *
 *  return (
 *    <div>
 *      <button onClick={() => login()}>Login</button>
 *      <p>User: {principal?.toText()}</p>
 *    </div>
 *  )
 * };
 *
 * ```
 *
 * This setup allows you to use the agent and authentication hooks within
 * the components wrapped by {@link AgentProvider}, facilitating interaction
 * with the Internet Computer blockchain.
 */
function createAgentContext(config = {}) {
    const { disableAuthenticateOnMount: defaultDisable } = config, contextOptions = __rest(config, ["disableAuthenticateOnMount"]);
    const AgentContext = react_1.default.createContext(null);
    const AgentProvider = (_a) => {
        var { children, agentManager: mybeAgentManager, disableAuthenticateOnMount = defaultDisable !== null && defaultDisable !== void 0 ? defaultDisable : false } = _a, options = __rest(_a, ["children", "agentManager", "disableAuthenticateOnMount"]);
        const hooks = react_1.default.useMemo(() => {
            const agentManager = mybeAgentManager !== null && mybeAgentManager !== void 0 ? mybeAgentManager : (0, core_1.createAgentManager)(Object.assign(Object.assign({}, options), contextOptions));
            if (!disableAuthenticateOnMount) {
                agentManager.authenticate();
            }
            return Object.assign(Object.assign(Object.assign({}, (0, agentHooks_1.agentHooks)(agentManager)), (0, authHooks_1.authHooks)(agentManager)), { agentManager });
        }, []);
        return (react_1.default.createElement(AgentContext.Provider, { value: hooks }, children));
    };
    AgentProvider.displayName = "AgentProvider";
    return Object.assign({ AgentProvider }, (0, extractAgentContext_1.extractAgentContext)(AgentContext));
}
exports.createAgentContext = createAgentContext;
